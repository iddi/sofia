/*******************************************************************************
 * Copyright (c) 2009,2011 Tecnalia Research and Innovation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Raul Otaolea (Tecnalia Research and Innovation - Software Systems Engineering) - initial API, implementation and documentation
 *    Fran Ruiz (Tecnalia Research and Innovation - Software Systems Engineering) - initial API, implementation and documentation
 *******************************************************************************/ 

package eu.sofia.adk.common.sax;

import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory; 
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException; 

import java.io.IOException; 
import java.io.InputStream;

//import org.apache.log4j.Logger;
import org.w3c.dom.Document;

/**
 * This class reads the content of an XML file and provides the 
 * methods to get the elements and attributes of the file
 * 
 * @author Fran Ruiz, Fran.Ruiz@tecnalia.com, Tecnalia
 *
 */
public class XMLParser {

	/** The document */
	private static Document domModel = null;
	
	/**
	 * The constructor
	 */
	public XMLParser() {
		domModel = null;
	}
	
	/**
	 * Method that reads from the <code>resource</code> parameter the DOM
	 * @param resource The resource to read
	 */
	public void parse(String resource) {
		
		try {
			domModel = null;
			//logger.info("Creating document builder factory...");
			
			// Creates an instance the factory that gives us the 
			// document builder
			DocumentBuilderFactory factory =
			    DocumentBuilderFactory.newInstance();

			//logger.info("Creating document builder...");
			// Gets the document builder and parses the reference file
			DocumentBuilder builder = factory.newDocumentBuilder();
			//logger.info("Setting error handler to the builder...");
			builder.setErrorHandler(new SAXErrorHandler());

			// Gets the input stream
			InputStream is = ResourceUtil.getInputStream(resource);
			
			//logger.info("Parsing " + resource);
			
			domModel = builder.parse(is);
			
			domModel.getDocumentElement().normalize();			
			
		} catch (SAXParseException spe) {
			// Error generated by the parser
			//logger.error("\n** Parsing error"
		    //  + ", line " + spe.getLineNumber()
		    //  + ", uri " + spe.getSystemId());
			//logger.error("   " + spe.getMessage() );
		  
		    // Use the contained exception, if any
		    Exception x = spe;
		    if (spe.getException() != null) {
		    	x = spe.getException();
		    }
		    x.printStackTrace();
		    
		} catch (SAXException sxe) {
			//logger.error("Cannot parse XML file");
			  
			// Error generated during parsing
		    Exception x = sxe;
		    if (sxe.getException() != null) {
		    	x = sxe.getException();
		    }
		    x.printStackTrace();
		} catch (ParserConfigurationException pce) {
			//logger.error("Parser configuration Error during parsing");
		    // Parser with specified options can't be built
		    pce.printStackTrace();
		} catch (IOException ioe) {
			//logger.error("I/O Error during parsing");
		    // I/O error
			//logger.error(ioe.getLocalizedMessage());
			//logger.error(ioe.getMessage());
		} catch (Exception ex) {
			//logger.error("Error during parsing: " + ex.getMessage(), ex.getCause());
			ex.printStackTrace();
		}
	}
	
	/**
	 * Gets the parsed document
	 * @return the Document
	 */
	public Document getDocument() {
		return domModel;
	}
}


