============
Description
============

The Semantic Connections demonstrator consists of various different components:

Interaction Tile KP
===================

This KP was written in Python and tested on Ubuntu 10.04. On startup, the KP connects to the Arduino inside the interaction tile over a serial port::

    ser = serial.Serial('/dev/ttyUSB0',115200)

It then connects to the smart space using the ``TripleStore`` class, after which it connects to the RFID reader inside the interaction tile using the `RFIDIOt <http://rfidiot.org/documentation.html>`_ library. 

The script then enters an event loop, where it listens for new objects. When an object is placed next to the tile, the Arduino sends a command on the serial port, which specifies the position of the object (preceded by a one, e.g. position will be 11). The RFID tag is then read using the ``card.select()`` command. An ``NFCEnterEvent`` is generated and sent to the smart space.

After reading the RFID tag, the tag is disabled using the ``card.acs_halt()`` command. This ensures that the script will only read the tag again once it is removed from the RFID field and resets itself (before coming within range again).

If the position received from the Arduino is 0-3, an ``NFCExitEvent`` is generated. If the position is 'C' (ASCII char 67), a ``connectedDevices(True)`` is called to create a ``connectedTo`` relationship between the objects next to the tile. 'D' (ASCII char 68) will disconnect the objects using ``connectedDevices(False)``.

Pressing *Ctrl+C* will leave the smart space and exit the program.

For more information on the tile KP, see :ref:`tileKP`.


Music Player KP
===============

This Python-based KP runs on Symbian S60. It has been tested on a Nokia 5800 XpressMusic. 

When the KP starts, it first connects to the smart space using the ``TripleStore`` class, adds a ``ConnectEvent``, and subscribes to new ``PlayEvents``, ``StopEvents`` and ``CueEvents``. It then enters an event loop where either a play/stop/forward command on the phone GUI will generate a new event, or it will respond to events generated by other devices through the ``RdfMsgHandler()`` subscription callback function.

For more information on the Music Player KP, see :ref:`PlayMusic`.

Maemo KP
========

This Python-based KP runs on Maemo 5 devices with PyQt4 and has been tested on a Nokia N900.

This KP is functionally the same as the Music Player KP, except that it runs on the Maemo platform and uses the Qt4 Phonon framework to play/stop/forward music. For more information on the Maemo KP, see :ref:`maemoKP`.

Sound/Light KP
==============

.. todo::
    
    Description to be added.


